# Default values for ygdrassil-monitoring.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
appName: ygdrassil-monitoring
# Decide expose services using TLS or not
serviceSchema: "https"
## Prometheus
prometheusUrl: prometheus.proyectopqmc.com
## Alertmanager
alertmanagerUrl: alertmanager.proyectopqmc.com
## Grafana
grafanaUrl: grafana.proyectopqmc.com
## OpenSearch
opensearchUrl: opensearch.proyectopqmc.com
opensearchDashboardUrl: dashboard.proyectopqmc.com
## Prometheus Targets
prometheus:
  alertmanager:
    persistence:
      enabled: false
  server:
    securityContext:
      runAsUser: 1000
      runAsNonRoot: true
      runAsGroup: 65534
      fsGroup: 1000
    persistentVolume:
      existingClaim: ygdrassil-monitoring-prometheus-server
  extraScrapeConfigs: |
    - job_name: aeneabot-exporter
      scrape_interval: 2s
      params:
        module: [http_2xx]
      metrics_path: /
      static_configs:
        - targets:
          - http://aeneabot-svc.aeneabot.svc.cluster.local:9900
      relabel_configs:
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: instance
        - target_label: __address__
          replacement: aeneabot-svc.aeneabot.svc.cluster.local:9900
    - job_name: raponchi-exporter
      scrape_interval: 2s
      params:
        module: [http_2xx]
      metrics_path: /
      static_configs:
        - targets:
          - http://raponchi-prometheus-svc.raponchi.svc.cluster.local:10090
      relabel_configs:
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: instance
        - target_label: __address__
          replacement: raponchi-prometheus-svc.raponchi.svc.cluster.local:10090
# Algo temporal
secretsExporter:
  podAnnotations:
    prometheus.io/port: "9793"
    prometheus.io/scrape: "true"
service:
  create: false
prometheusServiceMonitor:
  create: false
prometheusRules:
  create: false
hostPathsExporter:
  daemonSets:
    nodes:
      watchFiles:
      - /var/lib/kubelet/pki/kubelet-client-current.pem
      - /etc/kubernetes/pki/apiserver.crt
      - /etc/kubernetes/pki/apiserver-etcd-client.crt
      - /etc/kubernetes/pki/apiserver-kubelet-client.crt
      - /etc/kubernetes/pki/ca.crt
      - /etc/kubernetes/pki/front-proxy-ca.crt
      - /etc/kubernetes/pki/front-proxy-client.crt
      - /etc/kubernetes/pki/etcd/ca.crt
      - /etc/kubernetes/pki/etcd/healthcheck-client.crt
      - /etc/kubernetes/pki/etcd/peer.crt
      - /etc/kubernetes/pki/etcd/server.crt
      watchKubeconfFiles:
      - /etc/kubernetes/admin.conf
      - /etc/kubernetes/controller-manager.conf
      - /etc/kubernetes/scheduler.conf
grafana:
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Prometheus
        type: prometheus
        url: http://monitoring-prometheus-server.monitoring.svc.cluster.local:80
        access: proxy
        isDefault: true
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: default
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: false
          options:
            path: /var/lib/grafana/dashboards/default
    dashboards:
      default:
        kubernetes:
          gnetId: 12740
          version: 1
          datasource: Prometheus
        node_exporter:
          gnetId: 1860
          version: 37
          datasource: Prometheus
opensearch:
  persistence:
    enabled: true
  singleNode: true
